<?php
/** @var app\models\Form $model */
/** @var $pdfData */
/** @var yii\web\View $this */

use yii\bootstrap5\ActiveForm;
use yii\helpers\Html;

$types = [
    '–æ–±–ª–∞–¥–∞—Ç–µ–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞;',
    '–æ–±–ª–∞–¥–∞—Ç–µ–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞ –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º;',
    '–æ–±–ª–∞–¥–∞—Ç–µ–ª—è –≥—Ä–∞–Ω—Ç–∞ –º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞;',
    '–Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ –ø–æ –∫–æ–Ω–∫—É—Ä—Å—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ï–ù–¢;',
    '–Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º;',
    '–≥—Ä–∞–Ω—Ç ¬´–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –•–∞–ª–∫—ã–Ω–∞¬ª;',
    '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞–Ω—Ç –¥–ª—è –º–æ–ª–æ–¥—ë–∂–∏ –∏–∑ –≥—É—Å—Ç–æ–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –∏ –∑–∞–ø–∞–¥–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤;',
];
?>

<script>

    function unblockScreen() {
        console.log("unblockScreen()");
    }
    function openDialog() {
        alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–æ–¥—É–ª–µ–º –≠–¶–ü!");
    }


    const getDataSign = () =>{
        return document.getElementById("dataToSign").value;
    }
    const getDataComplete = () =>{
        return document.getElementById("dataCompleteSign");
    }

    const getSocketUrl = ()=>{
        return  'wss://127.0.0.1:13579/';
    }


    function connect() {
        if (connect.webSocket && connect.webSocket.readyState < 2) {
            console.log("reusing the socket connection [state = " + connect.webSocket.readyState + "]: " + connect.webSocket.url);
            return Promise.resolve(connect.webSocket);
        }

        return new Promise(function (resolve, reject) {
            connect.webSocket = new WebSocket(getSocketUrl());

            connect.webSocket.onopen = function () {
                console.log("socket connection is opened [state = " + connect.webSocket.readyState + "]: " + connect.webSocket.url);
                resolve(connect.webSocket);
            };

            connect.webSocket.onerror = function (err) {
                unblockScreen();
                console.error("socket connection error : ", err);
                reject(err);
            };

            connect.webSocket.onclose = function (event) {
                if (event.wasClean) {
                    console.error("socket connection is closed ");
                } else {
                    console.log('Connection error');
                    openDialog();
                }
                console.log('Code: ' + event.code + ' Reason: ' + event.reason);
            };
        });
    }

    async function processSign (){
        // debugger
        // const signatureType = 'cms';
        const signatureType = 'xml';
        const dataToSign = getDataSign();
        const decode = "true";
        const encapsulate = "true";
        const digested = "false";
        const extKeyUsageOidString = false;
        const extKeyUsageOids = [];
        const caCertsString = '';
        let caCerts=null;
        const localeRadio = 'ru';
        const iin = '';
        const bin='';
        const serialNumber='';
        const tsaProfile = null;
        let selectedStorages = ['PKCS12', 'AKKaztoken', 'WEB', 'CAPI', 'NCALayer'];


        let signInfo = {
            module: "kz.gov.pki.knca.basics",
            method: "sign",
            args: {
                allowedStorages: selectedStorages,
                format: "xml",
                data: getDataSign(),
                signingParams: {
                    decode: "true",
                    encapsulate: "true",
                    digested: "false",
                    tsaProfile: null
                },
                signerParams: {
                    extKeyUsageOids: extKeyUsageOids,
                    iin: iin,
                    bin: bin,
                    serialNumber: serialNumber,
                    chain: null
                },
                locale: localeRadio
            }
        }

        try {
            const webSocket = await connect();
            webSocket.send(JSON.stringify(signInfo));

            webSocket.onmessage = ({ data }) => {
                const response = JSON.parse(data);
                if (response?.status === true && response.body?.result) {
                    const signed = response.body.result;

                    const formData = new FormData();
                    formData.append("signData", signed);
                    formData.append("formId", document.getElementById("formId").value);
                    formData.append("_csrf", yii.getCsrfToken());

                    const request = new XMLHttpRequest();
                    request.open("POST", "/form/add");

                    request.onload = () => {
                        if (request.status === 200) {
                            document.open();
                            document.write(request.responseText);
                            document.close(); // üëà —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç success.php
                        } else {
                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: " + request.statusText);
                        }
                    };

                    request.onerror = () => {
                        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å–∏");
                    };

                    request.send(formData);
                } else {
                    alert("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: " + response?.code ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                }
            };
        } catch (err) {
            alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥—É–ª—é –ø–æ–¥–ø–∏—Å–∏: " + err);
        }
    }

    async function clickSign() {
        await  processSign()
    }

</script>

<style>
    @media print {
        .no-print {
            display: none !important;
        }
    }

    body {
        font-family: "Times New Roman", serif;
        font-size: 10pt;
        line-height: 1.5;
        margin: 0;
        padding: 20mm 20mm 20mm 20mm;
    }
    .header-right {
        text-align: right;
        font-weight: bold;
        margin-bottom: 10mm;
    }
    .header-right-cap {
        text-align: right;
        font-weight: normal;
        font-style: italic;
        margin-bottom: 10mm;
    }
    .center-title {
        text-align: center;
        font-weight: bold;
        font-size: 10pt;
        margin-top: 15mm;
        margin-bottom: 5mm;
    }
    .label-small {
        font-size: 10pt;
        text-align: center;
    }
    ul {
        margin-top: 5mm;
        margin-left: 20mm;
        padding-left: 0;
    }
    li {
        margin-bottom: 2mm;
    }
    .footer-space {
        margin-top: 25mm;
    }
</style>

<!--<div class="no-print" style="margin-top: 20px;">-->
<!--    --><?php //= Html::a('–ü–æ–¥–ø–∏—Å–∞—Ç—å', ['form/view', 'formId' => $model->id], ['class' => 'btn btn-primary']) ?>
<!--</div>-->

<div class="document-view no-print mt-4">
    <?php $form = ActiveForm::begin(['id' => 'signForm']); ?>

    <!-- –°–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ -->
    <textarea type="text" hidden id="dataToSign" rows="3"><?= Html::encode($pdfData) ?></textarea>
    <input type="hidden" id="formId" value="<?= $model->id ?>">

    <?php ActiveForm::end(); ?>

    <!-- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∏ -->
    <button type="button"
            class="btn btn-lg btn-success shadow-sm px-4 py-2 mt-3"
            onclick="clickSign()"
    >
        <i class="bi bi-pen-fill me-2"></i> –ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
    </button>
</div>



<div class="header-right-cap">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2</div>

<table style="width: 100%; border-spacing: 0; margin-bottom: 10mm;">
    <tr>
        <td style="width: 65%;"></td>
        <td class="header-right" style="width: 35%; text-align: left;">
            –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é –ü—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äì –†–µ–∫—Ç–æ—Ä—É<br>
            –ù–ê–û ¬´–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –ê–±—ã–ª–∫–∞—Å–∞ –°–∞–≥–∏–Ω–æ–≤–∞¬ª<br>
            –¥.—ç.–Ω., –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É<br>
            –°–∞–≥–∏–Ω—Ç–∞–µ–≤–æ–π –°.–°.
        </td>
    </tr>
</table>

<table style="width: 100%; border-spacing: 0; margin-bottom: 2mm;">
    <tr>
        <td style="border-bottom: 1px solid black; text-align: center;">
            <?= Html::encode("{$model->surname} {$model->first_name} {$model->patronymic}") ?>
        </td>
    </tr>
    <tr>
        <td class="label-small">(—Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é)</td>
    </tr>
</table>

<table style="width: 100%; border-spacing: 0; margin-bottom: 3mm;">
    <tr>
        <td style="width: 55mm;">–ø—Ä–æ–∂–∏–≤–∞—é—â–µ–≥–æ(–µ–π) –ø–æ –∞–¥—Ä–µ—Å—É:</td>
        <td style="border-bottom: 1px solid black;">
            <?= Html::encode($model->address) ?>
        </td>
    </tr>
</table>

<div class="center-title">
    –ó–ê–Ø–í–õ–ï–ù–ò–ï <span style="font-weight: normal;">(–ª–∏—á–Ω–æ–µ –ø–æ—Å—Ç—É–ø–∞—é—â–µ–≥–æ)</span>
</div>

<p>
    –ü—Ä–æ—à—É –∑–∞—á–∏—Å–ª–∏—Ç—å –º–µ–Ω—è –≤ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ 1 –∫—É—Ä—Å–∞ <i>(–Ω—É–∂–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å)</i>:
</p>

<ul>
    <?php foreach ($types as $type): ?>
        <li>
            <?= rtrim($type, ';') === $model->education_type
                ? '<span style="text-decoration: underline;">' . Html::encode($type) . '</span>'
                : Html::encode($type) ?>
        </li>
    <?php endforeach; ?>
</ul>

<table style="width: 100%; border-spacing: 0; margin-top: 5mm; margin-bottom: 2mm;">
    <tr>
        <td style="width: 55mm;">–ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:</td>
        <td style="border-bottom: 1px solid black;">
            <?= Html::encode($model->edu_program) ?>
        </td>
    </tr>
</table>

<table style="width: 100%; border-spacing: 0; margin-bottom: 5mm;">
    <tr>
        <td style="width: 35mm;">—è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è:</td>
        <td style="border-bottom: 1px solid black;">
            <?= Html::encode($model->edu_language) ?>
        </td>
    </tr>
</table>

<p style="margin-top: 15mm">
    –° –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–∏—ë–º–∞ –≤ –≤—ã—Å—à–µ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ 2025 –≥., –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞)
</p>

<table style="width: 100%; border-spacing: 0; margin-bottom: 3mm; margin-top: 10mm">
    <tr>
        <td style="width: 45mm;">
            –î–∞—Ç–∞:
            <span style="border-bottom: 1px solid black; display: inline-block; min-width: 25mm; text-align: center;">
                <?= date('d.m.Y', $model->date_filled) ?>
            </span>
        </td>
        <td></td>
        <td style="text-align: right; white-space: nowrap;">
            –ü–æ–¥–ø–∏—Å—å:
        </td>
        <td style="border-bottom: 1px solid black; width: 40mm;"></td>
    </tr>
</table>

<div class="footer-space">
    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ___________________________
</div>
